# ==============================================================================
# Inventory Generator Configuration
# ==============================================================================
# Define network zones to scan and generate Ansible inventory from
# Each zone becomes a group in the inventory with appropriate variables
# ==============================================================================

# ==============================================================================
# SCANNING ZONES
# ==============================================================================
# Define your network zones here. Each zone will be scanned separately
# and hosts will be grouped accordingly in the generated inventory.

zones:
  production:
    subnet: "192.168.1.0/24"
    description: "Production servers - full hardening"
    # Ports to scan - common production services
    scan_ports: "22,80,443,3306,5432,6379,8080,9200,27017"
    # Variables specific to this zone
    vars:
      # Staging auto-removes emergency SSH after deployment
      remove_emergency_ssh: false
      # Run full hardening suite
      run_full_hardening: true
      dry_run: 0

  staging:
    subnet: "192.168.2.0/24"
    description: "Staging servers - test hardening first"
    scan_ports: "22,80,443,3306,5432"
    vars:
      remove_emergency_ssh: true  # Auto-cleanup after verification
      run_full_hardening: true
      dry_run: 0

  test:
    subnet: "192.168.3.0/24"
    description: "Test servers - dry run testing"
    scan_ports: "22,80,443"
    vars:
      dry_run: 1                  # Simulation mode only
      run_full_hardening: false   # Priority 1 scripts only
      remove_emergency_ssh: true

# ==============================================================================
# SCAN SETTINGS
# ==============================================================================
scan_settings:
  # Scan type: basic|full|fast
  # basic: TCP connect scan (no root required, safe, slower)
  # full:  SYN scan with version/OS detection (requires root, comprehensive)
  # fast:  Quick scan with aggressive timing (faster, less accurate)
  type: "basic"

  # Timeout for each host (seconds)
  host_timeout: 300

  # Parallel hosts to scan simultaneously
  parallel: 10

  # Retry failed hosts
  max_retries: 1

  # Skip hosts that don't respond to ping
  skip_host_discovery: false

# ==============================================================================
# SSH CONNECTIVITY TESTING
# ==============================================================================
ssh_test:
  # Test SSH connectivity to discovered hosts
  enabled: true

  # Timeout for SSH connection test (seconds)
  timeout: 5

  # Skip hosts where SSH fails
  skip_unreachable: false

# ==============================================================================
# DEFAULT ANSIBLE VARIABLES
# ==============================================================================
# These are suggested defaults - can be overridden interactively

defaults:
  # Default SSH user for all hosts
  ansible_user: "admin"

  # Default SSH port (will be auto-detected if different)
  ansible_port: 22

  # Python interpreter path
  ansible_python_interpreter: "/usr/bin/python3"

  # Privilege escalation method
  ansible_become_method: "sudo"

  # SSH connection timeout
  ansible_timeout: 30

  # Admin IP for firewall whitelist
  # Special values:
  #   "auto" - Auto-detect from scanner's IP
  #   "prompt" - Ask user interactively
  #   "<IP>" - Use specific IP address
  admin_ip: "auto"

  # Users allowed to SSH (space-separated)
  # CRITICAL: Must be set to prevent lockout
  ssh_allow_users: ""  # Leave empty to prompt

  # Groups allowed to SSH (space-separated)
  ssh_allow_groups: ""

# ==============================================================================
# SERVICE DETECTION
# ==============================================================================
# Map detected ports to services and suggest firewall configuration

service_detection:
  # Enable intelligent port suggestion
  enabled: true

  # Service definitions for port mapping
  services:
    22:
      name: "SSH"
      category: "management"
      always_allow: true
      description: "Secure Shell - required for Ansible"

    80:
      name: "HTTP"
      category: "web"
      suggest_allow: true
      description: "Web server"

    443:
      name: "HTTPS"
      category: "web"
      suggest_allow: true
      description: "Secure web server"

    3306:
      name: "MySQL"
      category: "database"
      suggest_allow: false
      warn: "Consider using trusted_networks instead of public access"
      description: "MySQL database"

    5432:
      name: "PostgreSQL"
      category: "database"
      suggest_allow: false
      warn: "Consider using trusted_networks instead of public access"
      description: "PostgreSQL database"

    6379:
      name: "Redis"
      category: "cache"
      suggest_allow: false
      warn: "Redis should not be exposed publicly"
      description: "Redis cache"

    8080:
      name: "HTTP-Alt"
      category: "web"
      suggest_allow: true
      description: "Alternate HTTP port"

    9200:
      name: "Elasticsearch"
      category: "search"
      suggest_allow: false
      warn: "Elasticsearch should be on private network"
      description: "Elasticsearch"

    27017:
      name: "MongoDB"
      category: "database"
      suggest_allow: false
      warn: "MongoDB should not be exposed publicly"
      description: "MongoDB database"

# ==============================================================================
# HOSTNAME RESOLUTION
# ==============================================================================
hostname_resolution:
  # Try to resolve hostnames via reverse DNS
  enabled: true

  # Fallback hostname pattern if DNS fails
  # Available placeholders: {zone}, {ip}, {index}
  fallback_pattern: "{zone}{index}"

  # Domain suffix to append
  domain_suffix: ".local"

# ==============================================================================
# OUTPUT SETTINGS
# ==============================================================================
output:
  # Default output file
  default_file: "../inventory-generated.ini"

  # Backup existing inventory before overwriting
  backup_existing: true

  # Include scan metadata in comments
  include_metadata: true

  # Include service detection comments
  include_service_hints: true

# ==============================================================================
# VALIDATION
# ==============================================================================
validation:
  # Require at least one host discovered per zone
  require_hosts: true

  # Warn if no SSH detected on host
  warn_no_ssh: true

  # Fail if duplicate IPs found
  fail_on_duplicates: true
