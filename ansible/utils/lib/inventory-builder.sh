#!/bin/sh
# ==============================================================================
# Inventory Builder Library
# ==============================================================================
# Generates Ansible inventory files in INI format
# ==============================================================================

# Initialize inventory file with header
# Usage: init_inventory <output_file> <metadata>
init_inventory() {
    local output="$1"
    local metadata="$2"

    cat > "$output" <<EOF
# ==============================================================================
# Auto-Generated Ansible Inventory
# ==============================================================================
# Generated by: POSIX Hardening Inventory Generator
# Generated at: $(date '+%Y-%m-%d %H:%M:%S')
$metadata
# ==============================================================================

EOF
}

# Add host entry to zone
# Usage: add_host <output_file> <zone> <hostname> <ip> <port> <user>
add_host() {
    local output="$1"
    local zone="$2"
    local hostname="$3"
    local ip="$4"
    local port="$5"
    local user="$6"

    # Check if zone section exists, if not create it
    if ! grep -q "^\[$zone\]" "$output" 2>/dev/null; then
        echo "[$zone]" >> "$output"
    fi

    # Add host line
    echo "$hostname ansible_host=$ip ansible_port=$port ansible_user=$user" >> "$output"
}

# Add zone variables section
# Usage: add_zone_vars <output_file> <zone> <vars>
add_zone_vars() {
    local output="$1"
    local zone="$2"
    shift 2
    local vars="$@"

    echo "" >> "$output"
    echo "[${zone}:vars]" >> "$output"

    # Add each variable
    echo "$vars" >> "$output"
}

# Add global variables
# Usage: add_global_vars <output_file> <vars>
add_global_vars() {
    local output="$1"
    shift
    local vars="$@"

    echo "" >> "$output"
    echo "[all:vars]" >> "$output"
    echo "$vars" >> "$output"
}

# Create group hierarchy
# Usage: create_group_hierarchy <output_file> <group_name> <child_groups>
create_group_hierarchy() {
    local output="$1"
    local group_name="$2"
    shift 2
    local children="$@"

    echo "" >> "$output"
    echo "[${group_name}:children]" >> "$output"
    for child in $children; do
        echo "$child" >> "$output"
    done
}
